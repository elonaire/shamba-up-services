name: CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ['main']
  pull_request:
    branches: ['main', 'dev']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  SHOULD_RUN: 'false'
  PATHS: 'services/acl-service/,services/shared-service/'
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_and_deploy_acl:
    runs-on: ubuntu-latest
    # needs: [build]

    permissions:
      id-token: write # required to use OIDC authentication
      contents: read # required to checkout the code from the repo

    steps:
      - uses: actions/checkout@v3

      - id: file_changes
        name: Check for ACL Service Changes
        run: |
          echo "files=$(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | xargs)" >> $GITHUB_OUTPUT
      
      - id: confirm_changes
        name: Confirm Changes
        shell: bash
        run: |
          SHOULD_RUN='false'

          # Show paths
          echo "Paths: ${{ env.PATHS }}"

          # Get the list of paths being monitored
          monitored_paths=$(echo "${{ env.PATHS }}" | tr "," " ")
          echo "Monitored paths: $monitored_paths"
          echo "Changed files: ${{ steps.file_changes.outputs.files }}"
          echo "If you see here files that you have not modified, please update your branch with changes from main."

          # Loop through each path
          for path in $monitored_paths
          do
            # Check if the modified files include this path
            if echo "${{ steps.file_changes.outputs.files }}" | grep -q "$path"; then
              # Set the output variable and exit the loop
              echo "triggering_path is $path"
              SHOULD_RUN='true'
              break
            fi
          done

      - if: env.SHOULD_RUN == 'true'
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - if: env.SHOULD_RUN == 'true'
        name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - if: env.SHOULD_RUN == 'true'
        name: Build the Docker image
        run: docker-compose  -f docker-compose.yml -f docker-compose.acl.yml build
    
      - if: env.SHOULD_RUN == 'true'
        name: Push the Docker image
        run: docker-compose push

  build_and_deploy_shared_service:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'services/shared-service/')
    # needs: [build]

    permissions:
      id-token: write # required to use OIDC authentication
      contents: read # required to checkout the code from the repo

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build the Docker image
        run: docker-compose  -f docker-compose.yml -f docker-compose.shared.yml build
    
      - name: Push the Docker image
        run: docker-compose push

  automerge:
    runs-on: ubuntu-latest

    needs: [build_and_deploy_acl, build_and_deploy_shared_service]
    if: needs.build_and_deploy_acl.result == 'success' || needs.build_and_deploy_shared_service.result == 'success'

    steps:
      - id: automerge
        name: automerge
        uses: 'pascalgn/automerge-action@v0.15.5'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          MERGE_LABELS: ''
